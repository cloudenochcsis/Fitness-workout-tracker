# Azure DevOps Pipeline for Fitness Workout Tracker

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - '*.md'

variables:
  # Container registry service connection
  dockerRegistryServiceConnection: 'your-acr-service-connection'
  containerRegistry: 'your-registry-name.azurecr.io'
  
  # Image repository names
  backendImageRepository: 'fitness-tracker-backend'
  frontendImageRepository: 'fitness-tracker-frontend'
  
  # Docker image tags
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Stage
  jobs:
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    # Install dependencies and run tests for backend
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        addToPath: true
      displayName: 'Use Python 3.9'
      
    - script: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install backend dependencies'
      
    - script: |
        cd backend
        pytest --junitxml=junit/test-results.xml
      displayName: 'Run backend tests'
      
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/backend/junit'
        mergeTestResults: true
        testRunTitle: 'Backend Tests'
      displayName: 'Publish backend test results'
      condition: succeededOrFailed()

    # Install dependencies and run tests for frontend
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Use Node.js 16.x'
      
    - script: |
        cd frontend
        npm ci
      displayName: 'Install frontend dependencies'
      
    - script: |
        cd frontend
        npm test -- --watchAll=false
      displayName: 'Run frontend tests'
      
    # Build and push backend Docker image
    - task: Docker@2
      displayName: 'Build and push backend image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(backendImageRepository)'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile.backend'
        buildContext: '.'
        tags: |
          $(tag)
          latest
          
    # Build and push frontend Docker image
    - task: Docker@2
      displayName: 'Build and push frontend image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(frontendImageRepository)'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile.frontend'
        buildContext: '.'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAppService
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy backend to Azure App Service
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Backend to Azure App Service for Containers'
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: 'fitness-tracker-backend'
              containers: '$(containerRegistry)/$(backendImageRepository):$(tag)'
              
          # Deploy frontend to Azure App Service
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Frontend to Azure App Service for Containers'
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: 'fitness-tracker-frontend'
              containers: '$(containerRegistry)/$(frontendImageRepository):$(tag)'
